name: Generate and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Generate documentation with pdoc
        run: |
          # Create docs directory
          mkdir -p docs/api
          
          # Generate HTML documentation using pdoc
          python -m pdoc \
            --output-dir docs/api \
            --docformat markdown \
            --include-undocumented \
            --show-source \
            src/py_spark_example
          
          # Create an index.html that redirects to the main module documentation
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="utf-8">
              <title>PySpark ETL Example - API Documentation</title>
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta http-equiv="refresh" content="0; url=./api/py_spark_example.html">
              <meta name="description" content="Comprehensive ETL pipeline implementation using PySpark with advanced data transformations and aggregations">
              <style>
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      color: #333;
                  }
                  .container {
                      background: rgba(255, 255, 255, 0.95);
                      border-radius: 12px;
                      padding: 3rem;
                      max-width: 600px;
                      margin: 2rem;
                      text-align: center;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      backdrop-filter: blur(10px);
                  }
                  h1 {
                      color: #2c3e50;
                      margin-bottom: 0.5rem;
                      font-size: 2.5rem;
                      font-weight: 700;
                  }
                  .subtitle {
                      color: #6c757d;
                      margin-bottom: 2rem;
                      font-size: 1.1rem;
                      line-height: 1.6;
                  }
                  .redirect-info {
                      background: #e3f2fd;
                      border-left: 4px solid #2196f3;
                      padding: 1rem;
                      margin: 2rem 0;
                      border-radius: 4px;
                      color: #0d47a1;
                  }
                  .btn {
                      display: inline-block;
                      padding: 14px 28px;
                      background: linear-gradient(45deg, #007bff, #0056b3);
                      color: white;
                      text-decoration: none;
                      border-radius: 6px;
                      font-weight: 600;
                      transition: all 0.3s ease;
                      box-shadow: 0 4px 15px rgba(0,123,255,0.3);
                      margin: 0.5rem;
                  }
                  .btn:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 6px 20px rgba(0,123,255,0.4);
                  }
                  .btn-secondary {
                      background: linear-gradient(45deg, #6c757d, #495057);
                      box-shadow: 0 4px 15px rgba(108,117,125,0.3);
                  }
                  .btn-secondary:hover {
                      box-shadow: 0 6px 20px rgba(108,117,125,0.4);
                  }
                  .features {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                      gap: 1rem;
                      margin: 2rem 0;
                  }
                  .feature {
                      padding: 1rem;
                      background: #f8f9fa;
                      border-radius: 8px;
                      font-size: 0.9rem;
                  }
                  .spinner {
                      border: 3px solid #f3f3f3;
                      border-top: 3px solid #007bff;
                      border-radius: 50%;
                      width: 24px;
                      height: 24px;
                      animation: spin 1s linear infinite;
                      display: inline-block;
                      margin-right: 0.5rem;
                  }
                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }
                  @media (max-width: 768px) {
                      .container { margin: 1rem; padding: 2rem; }
                      h1 { font-size: 2rem; }
                      .features { grid-template-columns: 1fr; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ PySpark ETL Example</h1>
                  <p class="subtitle">Comprehensive ETL pipeline with advanced data transformations</p>
                  
                  <div class="features">
                      <div class="feature">üìä <strong>Data Processing</strong></div>
                      <div class="feature">‚ö° <strong>PySpark</strong></div>
                      <div class="feature">üîß <strong>Type Hints</strong></div>
                      <div class="feature">‚úÖ <strong>Tested</strong></div>
                  </div>
          
                  <div class="redirect-info">
                      <div class="spinner"></div>
                      <strong>Redirecting to API Documentation...</strong>
                      <br>
                      <small>You will be automatically redirected in a moment</small>
                  </div>
          
                  <div>
                      <a href="./api/py_spark_example.html" class="btn">üìö View API Documentation</a>
                      <a href="https://github.com/willmorejg/py_example_etl" class="btn btn-secondary">üì¶ View Source Code</a>
                  </div>
              </div>
          
              <script>
                  // Fallback redirect after 3 seconds if meta refresh doesn't work
                  setTimeout(() => {
                      if (document.visibilityState === 'visible') {
                          window.location.href = './api/py_spark_example.html';
                      }
                  }, 3000);
              </script>
          </body>
          </html>
          EOF

      - name: Documentation build summary
        run: |
          echo "üìö Documentation generated successfully!"
          echo "üìÅ Files created:"
          ls -la docs/
          echo ""
          echo "üîç Generated files:"
          find docs/ -type f -name "*.html" | head -10
          echo ""
          echo "üìñ Main documentation entry point: docs/index.html"

      - name: Setup Pages
        id: setup-pages
        uses: actions/configure-pages@v4
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        if: steps.setup-pages.outcome == 'success'
        with:
          # Upload docs directory
          path: './docs'

      - name: Upload docs as build artifact (fallback)
        uses: actions/upload-artifact@v4
        if: steps.setup-pages.outcome != 'success'
        with:
          name: documentation
          path: './docs'

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Pages deployment status
        run: |
          if [ "${{ steps.deployment.outcome }}" == "success" ]; then
            echo "‚úÖ Documentation successfully deployed to GitHub Pages!"
            echo "üìñ View at: ${{ steps.deployment.outputs.page_url }}"
          else
            echo "‚ö†Ô∏è  GitHub Pages deployment failed. This is expected if Pages isn't enabled."
            echo "üìÅ Documentation was built and is available as an artifact."
            echo "üîß To enable Pages: Repository Settings ‚Üí Pages ‚Üí Source: GitHub Actions"
          fi
